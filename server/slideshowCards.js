import oracledb from 'oracledb';

const dbConfig = {
  user: process.env.DB_USER || 'system',
  password: process.env.DB_PASSWORD || 'Pusd4t1n2025',
  connectString: process.env.DB_CONNECT_STRING || '10.15.38.162:1539/FREEPDB1',
};

// Create tables
const createSlideshowCardsTableSQL = `
CREATE TABLE WEBSITE_JAKHABITAT_SLIDESHOW_CARDS (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  TITLE VARCHAR2(255) NOT NULL,
  DESCRIPTION CLOB,
  IMAGE_URL VARCHAR2(500) NOT NULL,
  ORDER_NUM NUMBER DEFAULT 1,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
`;

const createSlideshowHotspotsTableSQL = `
CREATE TABLE WEBSITE_JAKHABITAT_SLIDESHOW_HOTSPOTS (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  CARD_ID NUMBER NOT NULL,
  X_COORDINATE NUMBER NOT NULL,
  Y_COORDINATE NUMBER NOT NULL,
  TYPE VARCHAR2(20) DEFAULT 'link',
  LABEL VARCHAR2(255),
  HREF VARCHAR2(500),
  ICON VARCHAR2(100),
  TEXT_CONTENT VARCHAR2(255),
  ICON_URL VARCHAR2(500),
  TARGET_CARD_ID NUMBER,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT FK_SLIDESHOW_HOTSPOT_CARD FOREIGN KEY (CARD_ID) REFERENCES WEBSITE_JAKHABITAT_SLIDESHOW_CARDS(ID) ON DELETE CASCADE
)
`;

export async function initSlideshowTables() {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    // Check and create slideshow cards table
    const cardsTableCheck = await connection.execute(
      `SELECT COUNT(*) as count FROM user_tables WHERE table_name = 'WEBSITE_JAKHABITAT_SLIDESHOW_CARDS'`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    if (cardsTableCheck.rows[0].COUNT === 0) {
      await connection.execute(createSlideshowCardsTableSQL);
      console.log('Table WEBSITE_JAKHABITAT_SLIDESHOW_CARDS created successfully');
    }
    
    // Check and create slideshow hotspots table
    const hotspotsTableCheck = await connection.execute(
      `SELECT COUNT(*) as count FROM user_tables WHERE table_name = 'WEBSITE_JAKHABITAT_SLIDESHOW_HOTSPOTS'`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    if (hotspotsTableCheck.rows[0].COUNT === 0) {
      await connection.execute(createSlideshowHotspotsTableSQL);
      console.log('Table WEBSITE_JAKHABITAT_SLIDESHOW_HOTSPOTS created successfully');
    }
  } catch (error) {
    console.error('Slideshow tables initialization error:', error);
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

// Slideshow Cards CRUD
export async function getSlideshowCards() {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `SELECT ID, TITLE, DESCRIPTION, IMAGE_URL, ORDER_NUM, CREATED_AT, UPDATED_AT
       FROM WEBSITE_JAKHABITAT_SLIDESHOW_CARDS 
       ORDER BY ORDER_NUM ASC, CREATED_AT DESC`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result.rows.map(row => {
      const cleanRow = JSON.parse(JSON.stringify(row));
      return {
        id: cleanRow.ID,
        title: cleanRow.TITLE,
        description: cleanRow.DESCRIPTION,
        imageUrl: cleanRow.IMAGE_URL,
        order: cleanRow.ORDER_NUM,
        createdAt: cleanRow.CREATED_AT,
        updatedAt: cleanRow.UPDATED_AT
      };
    });
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function insertSlideshowCard(cardData) {
  let connection;
  try {
    // Validate required fields
    if (!cardData.title || !cardData.imageUrl) {
      throw new Error('Title and imageUrl are required');
    }
    
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `INSERT INTO WEBSITE_JAKHABITAT_SLIDESHOW_CARDS 
       (TITLE, DESCRIPTION, IMAGE_URL, ORDER_NUM) 
       VALUES (:title, :description, :imageUrl, :orderNum)`,
      {
        title: cardData.title,
        description: cardData.description || '',
        imageUrl: cardData.imageUrl,
        orderNum: cardData.order || 1
      },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function updateSlideshowCard(id, cardData) {
  let connection;
  try {
    // Validate required fields
    if (!cardData.title || !cardData.imageUrl) {
      throw new Error('Title and imageUrl are required');
    }
    
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `UPDATE WEBSITE_JAKHABITAT_SLIDESHOW_CARDS 
       SET TITLE = :title, DESCRIPTION = :description, IMAGE_URL = :imageUrl, 
           ORDER_NUM = :orderNum, UPDATED_AT = CURRENT_TIMESTAMP
       WHERE ID = :id`,
      {
        id: parseInt(id),
        title: cardData.title,
        description: cardData.description || '',
        imageUrl: cardData.imageUrl,
        orderNum: cardData.order || 1
      },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function deleteSlideshowCard(id) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `DELETE FROM WEBSITE_JAKHABITAT_SLIDESHOW_CARDS WHERE ID = :id`,
      { id: parseInt(id) },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

// Slideshow Hotspots CRUD
export async function getSlideshowHotspots(cardId) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `SELECT ID, CARD_ID, X_COORDINATE, Y_COORDINATE, TYPE, LABEL, HREF, ICON, 
              TEXT_CONTENT, ICON_URL, TARGET_CARD_ID, CREATED_AT
       FROM WEBSITE_JAKHABITAT_SLIDESHOW_HOTSPOTS 
       WHERE CARD_ID = :cardId
       ORDER BY CREATED_AT ASC`,
      { cardId: parseInt(cardId) },
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result.rows.map(row => {
      const cleanRow = JSON.parse(JSON.stringify(row));
      return {
        id: cleanRow.ID,
        cardId: cleanRow.CARD_ID,
        x: cleanRow.X_COORDINATE,
        y: cleanRow.Y_COORDINATE,
        type: cleanRow.TYPE,
        label: cleanRow.LABEL,
        href: cleanRow.HREF,
        icon: cleanRow.ICON,
        text: cleanRow.TEXT_CONTENT,
        iconUrl: cleanRow.ICON_URL,
        targetCardId: cleanRow.TARGET_CARD_ID,
        createdAt: cleanRow.CREATED_AT
      };
    });
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function insertSlideshowHotspot(hotspotData) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `INSERT INTO WEBSITE_JAKHABITAT_SLIDESHOW_HOTSPOTS 
       (CARD_ID, X_COORDINATE, Y_COORDINATE, TYPE, LABEL, HREF, ICON, TEXT_CONTENT, ICON_URL, TARGET_CARD_ID) 
       VALUES (:cardId, :x, :y, :type, :label, :href, :icon, :text, :iconUrl, :targetCardId)`,
      {
        cardId: hotspotData.cardId,
        x: hotspotData.x,
        y: hotspotData.y,
        type: hotspotData.type || 'link',
        label: hotspotData.label || null,
        href: hotspotData.href || null,
        icon: hotspotData.icon || null,
        text: hotspotData.text || null,
        iconUrl: hotspotData.iconUrl || null,
        targetCardId: hotspotData.targetCardId || null
      },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function deleteSlideshowHotspot(id) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `DELETE FROM WEBSITE_JAKHABITAT_SLIDESHOW_HOTSPOTS WHERE ID = :id`,
      { id: parseInt(id) },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

// Icons management
export async function getIcons() {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `SELECT ID, FILENAME, ORIGINAL_NAME, FILE_SIZE, CREATED_AT
       FROM WEBSITE_JAKHABITAT_FOTO 
       WHERE CATEGORY = 'icon'
       ORDER BY CREATED_AT DESC`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result.rows.map(row => {
      const cleanRow = JSON.parse(JSON.stringify(row));
      return {
        id: cleanRow.ID,
        filename: cleanRow.FILENAME,
        originalName: cleanRow.ORIGINAL_NAME,
        fileSize: cleanRow.FILE_SIZE,
        createdAt: cleanRow.CREATED_AT
      };
    });
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function deleteIcon(filename) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `DELETE FROM WEBSITE_JAKHABITAT_FOTO WHERE FILENAME = :filename AND CATEGORY = 'icon'`,
      { filename },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}
import oracledb from 'oracledb';

const dbConfig = {
  user: process.env.DB_USER || 'system',
  password: process.env.DB_PASSWORD || 'Pusd4t1n2025',
  connectString: process.env.DB_CONNECT_STRING || '10.15.38.162:1539/FREEPDB1',
};

// Create table if not exists
const createTableSQL = `
CREATE TABLE WEBSITE_JAKHABITAT_FOTO (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  FILENAME VARCHAR2(255) NOT NULL,
  ORIGINAL_NAME VARCHAR2(255) NOT NULL,
  FILE_PATH VARCHAR2(500) NOT NULL,
  FILE_SIZE NUMBER,
  MIME_TYPE VARCHAR2(100),
  CATEGORY VARCHAR2(50) DEFAULT 'panorama',
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
`;

export async function initDatabase() {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    // Check if table exists
    const result = await connection.execute(
      `SELECT COUNT(*) as count FROM user_tables WHERE table_name = 'WEBSITE_JAKHABITAT_FOTO'`
    );
    
    if (result.rows[0][0] === 0) {
      await connection.execute(createTableSQL);
      console.log('Table WEBSITE_JAKHABITAT_FOTO created successfully');
    }
  } catch (error) {
    console.error('Database initialization error:', error);
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function insertPhoto(photoData) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `INSERT INTO WEBSITE_JAKHABITAT_FOTO 
       (FILENAME, ORIGINAL_NAME, FILE_PATH, FILE_SIZE, MIME_TYPE, CATEGORY) 
       VALUES (:filename, :originalName, :filePath, :fileSize, :mimeType, :category)`,
      {
        filename: photoData.filename,
        originalName: photoData.originalName,
        filePath: photoData.filePath,
        fileSize: photoData.fileSize,
        mimeType: photoData.mimeType,
        category: photoData.category || 'panorama'
      },
      { autoCommit: true }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function getPhotos(category = 'panorama') {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `SELECT ID, FILENAME, ORIGINAL_NAME, FILE_PATH, FILE_SIZE, MIME_TYPE, CATEGORY, CREATED_AT 
       FROM WEBSITE_JAKHABITAT_FOTO 
       WHERE CATEGORY = :category 
       ORDER BY CREATED_AT DESC`,
      { category }
    );
    
    return result.rows.map(row => ({
      id: row[0],
      filename: row[1],
      originalName: row[2],
      filePath: row[3],
      fileSize: row[4],
      mimeType: row[5],
      category: row[6],
      createdAt: row[7]
    }));
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function deletePhoto(id) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `DELETE FROM WEBSITE_JAKHABITAT_FOTO WHERE ID = :id`,
      { id },
      { autoCommit: true }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}
import oracledb from 'oracledb';

const dbConfig = {
  user: process.env.DB_USER || 'system',
  password: process.env.DB_PASSWORD || 'Pusd4t1n2025',
  connectString: process.env.DB_CONNECT_STRING || '10.15.38.162:1539/FREEPDB1',
};

// Create table if not exists
const createTableSQL = `
CREATE TABLE WEBSITE_JAKHABITAT_FOTO (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  FILENAME VARCHAR2(255) NOT NULL,
  ORIGINAL_NAME VARCHAR2(255) NOT NULL,
  FILE_PATH VARCHAR2(500) NOT NULL,
  FILE_SIZE NUMBER,
  MIME_TYPE VARCHAR2(100),
  CATEGORY VARCHAR2(50) DEFAULT 'panorama',
  UNIT_ID NUMBER,
  ROOM_CATEGORY VARCHAR2(50),
  IS_DEFAULT NUMBER(1) DEFAULT 0,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
`;

const createHotspotTableSQL = `
CREATE TABLE WEBSITE_JAKHABITAT_HOTSPOTS (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  PHOTO_ID NUMBER NOT NULL,
  X_COORDINATE NUMBER NOT NULL,
  Y_COORDINATE NUMBER NOT NULL,
  DESTINATION VARCHAR2(50),
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT FK_HOTSPOT_PHOTO FOREIGN KEY (PHOTO_ID) REFERENCES WEBSITE_JAKHABITAT_FOTO(ID)
)
`;

export async function initDatabase() {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    // Check if table exists
    const result = await connection.execute(
      `SELECT COUNT(*) as count FROM user_tables WHERE table_name = 'WEBSITE_JAKHABITAT_FOTO'`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    if (result.rows[0].COUNT === 0) {
      await connection.execute(createTableSQL);
      console.log('Table WEBSITE_JAKHABITAT_FOTO created successfully');
    } else {
      // Check if UNIT_ID column exists
      const columnCheck = await connection.execute(
        `SELECT COUNT(*) as count FROM user_tab_columns WHERE table_name = 'WEBSITE_JAKHABITAT_FOTO' AND column_name = 'UNIT_ID'`,
        {},
        { outFormat: oracledb.OUT_FORMAT_OBJECT }
      );
      
      if (columnCheck.rows[0].COUNT === 0) {
        await connection.execute(`ALTER TABLE WEBSITE_JAKHABITAT_FOTO ADD UNIT_ID NUMBER`);
        console.log('Column UNIT_ID added to WEBSITE_JAKHABITAT_FOTO');
      }
      
      // Check if ROOM_CATEGORY column exists
      const roomCategoryCheck = await connection.execute(
        `SELECT COUNT(*) as count FROM user_tab_columns WHERE table_name = 'WEBSITE_JAKHABITAT_FOTO' AND column_name = 'ROOM_CATEGORY'`,
        {},
        { outFormat: oracledb.OUT_FORMAT_OBJECT }
      );
      
      if (roomCategoryCheck.rows[0].COUNT === 0) {
        await connection.execute(`ALTER TABLE WEBSITE_JAKHABITAT_FOTO ADD ROOM_CATEGORY VARCHAR2(50)`);
        console.log('Column ROOM_CATEGORY added to WEBSITE_JAKHABITAT_FOTO');
      }
      
      // Check if IS_DEFAULT column exists
      const isDefaultCheck = await connection.execute(
        `SELECT COUNT(*) as count FROM user_tab_columns WHERE table_name = 'WEBSITE_JAKHABITAT_FOTO' AND column_name = 'IS_DEFAULT'`,
        {},
        { outFormat: oracledb.OUT_FORMAT_OBJECT }
      );
      
      if (isDefaultCheck.rows[0].COUNT === 0) {
        await connection.execute(`ALTER TABLE WEBSITE_JAKHABITAT_FOTO ADD IS_DEFAULT NUMBER(1) DEFAULT 0`);
        console.log('Column IS_DEFAULT added to WEBSITE_JAKHABITAT_FOTO');
      }
      
      // Check and create HOTSPOTS table
      const hotspotTableCheck = await connection.execute(
        `SELECT COUNT(*) as count FROM user_tables WHERE table_name = 'WEBSITE_JAKHABITAT_HOTSPOTS'`,
        {},
        { outFormat: oracledb.OUT_FORMAT_OBJECT }
      );
      
      if (hotspotTableCheck.rows[0].COUNT === 0) {
        await connection.execute(createHotspotTableSQL);
        console.log('Table WEBSITE_JAKHABITAT_HOTSPOTS created successfully');
      }
    }
  } catch (error) {
    console.error('Database initialization error:', error);
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function insertPhoto(photoData) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    // If this is set as default, unset other defaults for same unit
    if (photoData.isDefault) {
      await connection.execute(
        `UPDATE WEBSITE_JAKHABITAT_FOTO SET IS_DEFAULT = 0 WHERE UNIT_ID = :unitId`,
        { unitId: photoData.unitId },
        { autoCommit: false }
      );
    }
    
    const result = await connection.execute(
      `INSERT INTO WEBSITE_JAKHABITAT_FOTO 
       (FILENAME, ORIGINAL_NAME, FILE_PATH, FILE_SIZE, MIME_TYPE, CATEGORY, UNIT_ID, ROOM_CATEGORY, IS_DEFAULT) 
       VALUES (:filename, :originalName, :filePath, :fileSize, :mimeType, :category, :unitId, :roomCategory, :isDefault)`,
      {
        filename: photoData.filename,
        originalName: photoData.originalName,
        filePath: photoData.filePath,
        fileSize: photoData.fileSize,
        mimeType: photoData.mimeType,
        category: photoData.category || 'panorama',
        unitId: photoData.unitId,
        roomCategory: photoData.roomCategory,
        isDefault: photoData.isDefault ? 1 : 0
      },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function getPhotos(category = 'panorama') {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `SELECT f.ID, f.FILENAME, f.ORIGINAL_NAME, f.FILE_PATH, f.FILE_SIZE, f.MIME_TYPE, f.CATEGORY, f.UNIT_ID, f.ROOM_CATEGORY, f.IS_DEFAULT, f.CREATED_AT,
              u.NAMA_UNIT as UNIT_NAME, u.TIPE_UNIT, u.LUAS, u.LOKASI
       FROM WEBSITE_JAKHABITAT_FOTO f
       LEFT JOIN WEBSITE_JAKHABITAT_MASTER_UNIT u ON f.UNIT_ID = u.ID
       WHERE f.CATEGORY = :category 
       ORDER BY f.CREATED_AT DESC`,
      { category },
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result.rows.map(row => ({
      id: row.ID,
      filename: row.FILENAME,
      originalName: row.ORIGINAL_NAME,
      filePath: row.FILE_PATH,
      fileSize: row.FILE_SIZE,
      mimeType: row.MIME_TYPE,
      category: row.CATEGORY,
      unitId: row.UNIT_ID,
      unitName: row.UNIT_NAME,
      tipeUnit: row.TIPE_UNIT,
      luas: row.LUAS,
      lokasi: row.LOKASI,
      roomCategory: row.ROOM_CATEGORY,
      isDefault: row.IS_DEFAULT === 1,
      createdAt: row.CREATED_AT
    }));
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function deletePhoto(id) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `DELETE FROM WEBSITE_JAKHABITAT_FOTO WHERE ID = :id`,
      { id },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function insertHotspot(hotspotData) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `INSERT INTO WEBSITE_JAKHABITAT_HOTSPOTS (PHOTO_ID, X_COORDINATE, Y_COORDINATE, DESTINATION) 
       VALUES (:photoId, :x, :y, :destination)`,
      {
        photoId: hotspotData.photoId,
        x: hotspotData.x,
        y: hotspotData.y,
        destination: hotspotData.destination
      },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function getHotspots(photoId) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `SELECT ID, X_COORDINATE, Y_COORDINATE, DESTINATION 
       FROM WEBSITE_JAKHABITAT_HOTSPOTS 
       WHERE PHOTO_ID = :photoId`,
      { photoId },
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result.rows.map(row => ({
      id: row.ID,
      x: row.X_COORDINATE,
      y: row.Y_COORDINATE,
      destination: row.DESTINATION
    }));
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function deleteHotspotsByPhoto(photoId) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `DELETE FROM WEBSITE_JAKHABITAT_HOTSPOTS WHERE PHOTO_ID = :photoId`,
      { photoId },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}
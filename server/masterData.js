import oracledb from 'oracledb';

const dbConfig = {
  user: process.env.DB_USER || 'system',
  password: process.env.DB_PASSWORD || 'Pusd4t1n2025',
  connectString: process.env.DB_CONNECT_STRING || '10.15.38.162:1539/FREEPDB1',
};

// Create tables if not exists
const createTablesSQL = {
  masterUnit: `
    CREATE TABLE WEBSITE_JAKHABITAT_MASTER_UNIT (
      ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      NAMA_UNIT VARCHAR2(255) NOT NULL,
      LOKASI VARCHAR2(255) NOT NULL,
      TIPE_UNIT VARCHAR2(50) NOT NULL,
      TIPE VARCHAR2(50) NOT NULL,
      LUAS NUMBER NOT NULL,
      DESKRIPSI CLOB,
      CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `,
  masterHarga: `
    CREATE TABLE WEBSITE_JAKHABITAT_MASTER_HARGA (
      ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      UNIT_ID NUMBER NOT NULL,
      HARGA_JUAL NUMBER NOT NULL,
      HARGA_SEWA NUMBER,
      DP_MINIMUM NUMBER DEFAULT 20,
      BUNGA_TAHUNAN NUMBER DEFAULT 12,
      CICILAN_5TH NUMBER,
      CICILAN_7TH NUMBER,
      CICILAN_10TH NUMBER,
      CICILAN_11TH NUMBER,
      CICILAN_15TH NUMBER,
      CICILAN_20TH NUMBER,
      CICILAN_25TH NUMBER,
      CICILAN_30TH NUMBER,
      DISKON NUMBER DEFAULT 0,
      TANGGAL_MULAI DATE,
      TANGGAL_BERAKHIR DATE,
      KETERANGAN CLOB,
      STATUS VARCHAR2(20) DEFAULT 'Aktif',
      CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      CONSTRAINT FK_JAKHABITAT_UNIT_HARGA FOREIGN KEY (UNIT_ID) REFERENCES WEBSITE_JAKHABITAT_MASTER_UNIT(ID)
    )
  `
};

export async function initMasterTables() {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    // Check and create WEBSITE_JAKHABITAT_MASTER_UNIT table
    const unitResult = await connection.execute(
      `SELECT COUNT(*) as count FROM user_tables WHERE table_name = 'WEBSITE_JAKHABITAT_MASTER_UNIT'`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    if (unitResult.rows[0].COUNT === 0) {
      await connection.execute(createTablesSQL.masterUnit);
      console.log('Table WEBSITE_JAKHABITAT_MASTER_UNIT created successfully');
    }
    
    // Check and create WEBSITE_JAKHABITAT_MASTER_HARGA table
    const hargaResult = await connection.execute(
      `SELECT COUNT(*) as count FROM user_tables WHERE table_name = 'WEBSITE_JAKHABITAT_MASTER_HARGA'`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    if (hargaResult.rows[0].COUNT === 0) {
      await connection.execute(createTablesSQL.masterHarga);
      console.log('Table WEBSITE_JAKHABITAT_MASTER_HARGA created successfully');
    }
  } catch (error) {
    console.error('Master tables initialization error:', error);
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

// MASTER UNIT CRUD
export async function createUnit(unitData) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `INSERT INTO WEBSITE_JAKHABITAT_MASTER_UNIT (NAMA_UNIT, LOKASI, TIPE_UNIT, TIPE, LUAS, DESKRIPSI) 
       VALUES (:namaUnit, :lokasi, :tipeUnit, :tipe, :luas, :deskripsi)`,
      {
        namaUnit: unitData.namaUnit,
        lokasi: unitData.lokasi,
        tipeUnit: unitData.tipeUnit,
        tipe: unitData.tipe,
        luas: unitData.luas,
        deskripsi: unitData.deskripsi
      },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function getUnits() {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `SELECT ID, NAMA_UNIT, LOKASI, TIPE_UNIT, TIPE, LUAS, DESKRIPSI, CREATED_AT 
       FROM WEBSITE_JAKHABITAT_MASTER_UNIT 
       ORDER BY CREATED_AT DESC`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result.rows.map(row => {
      return {
        id: Number(row.ID),
        namaUnit: String(row.NAMA_UNIT || ''),
        lokasi: String(row.LOKASI || ''),
        tipeUnit: String(row.TIPE_UNIT || ''),
        tipe: String(row.TIPE || ''),
        luas: Number(row.LUAS || 0),
        deskripsi: (() => {
          if (!row.DESKRIPSI) return '';
          if (typeof row.DESKRIPSI === 'string') return row.DESKRIPSI;
          if (row.DESKRIPSI && typeof row.DESKRIPSI.getData === 'function') {
            // Handle Oracle CLOB
            return row.DESKRIPSI.getData ? row.DESKRIPSI.getData() : '';
          }
          return row.DESKRIPSI.toString();
        })(),
        createdAt: row.CREATED_AT ? new Date(row.CREATED_AT).toISOString() : null
      };
    });
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function updateUnit(id, unitData) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `UPDATE WEBSITE_JAKHABITAT_MASTER_UNIT 
       SET NAMA_UNIT = :namaUnit, LOKASI = :lokasi, TIPE_UNIT = :tipeUnit, 
           TIPE = :tipe, LUAS = :luas, DESKRIPSI = :deskripsi, UPDATED_AT = CURRENT_TIMESTAMP
       WHERE ID = :id`,
      {
        id: id,
        namaUnit: unitData.namaUnit,
        lokasi: unitData.lokasi,
        tipeUnit: unitData.tipeUnit,
        tipe: unitData.tipe,
        luas: unitData.luas,
        deskripsi: unitData.deskripsi
      },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function deleteUnit(id) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `DELETE FROM WEBSITE_JAKHABITAT_MASTER_UNIT WHERE ID = :id`,
      { id },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

// MASTER HARGA CRUD
export async function createHarga(hargaData) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `INSERT INTO WEBSITE_JAKHABITAT_MASTER_HARGA 
       (UNIT_ID, HARGA_JUAL, HARGA_SEWA, DP_MINIMUM, BUNGA_TAHUNAN, 
        CICILAN_5TH, CICILAN_7TH, CICILAN_10TH, CICILAN_11TH, CICILAN_15TH, 
        CICILAN_20TH, CICILAN_25TH, CICILAN_30TH, DISKON, TANGGAL_MULAI, 
        TANGGAL_BERAKHIR, KETERANGAN, STATUS) 
       VALUES (:unitId, :hargaJual, :hargaSewa, :dpMinimum, :bungaTahunan,
               :cicilan5th, :cicilan7th, :cicilan10th, :cicilan11th, :cicilan15th,
               :cicilan20th, :cicilan25th, :cicilan30th, :diskon, :tanggalMulai,
               :tanggalBerakhir, :keterangan, :status)`,
      hargaData,
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function getHarga() {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `SELECT h.ID, h.UNIT_ID, u.NAMA_UNIT, u.LOKASI, u.TIPE_UNIT, u.LUAS,
              h.HARGA_JUAL, h.HARGA_SEWA, h.DP_MINIMUM, h.BUNGA_TAHUNAN,
              h.CICILAN_5TH, h.CICILAN_7TH, h.CICILAN_10TH, h.CICILAN_11TH,
              h.CICILAN_15TH, h.CICILAN_20TH, h.CICILAN_25TH, h.CICILAN_30TH,
              h.DISKON, h.STATUS, h.CREATED_AT
       FROM WEBSITE_JAKHABITAT_MASTER_HARGA h
       JOIN WEBSITE_JAKHABITAT_MASTER_UNIT u ON h.UNIT_ID = u.ID
       ORDER BY h.CREATED_AT DESC`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result.rows.map(row => {
      return {
        id: Number(row.ID),
        unitId: Number(row.UNIT_ID),
        namaUnit: String(row.NAMA_UNIT || ''),
        lokasi: String(row.LOKASI || ''),
        tipeUnit: String(row.TIPE_UNIT || ''),
        luas: Number(row.LUAS || 0),
        hargaJual: Number(row.HARGA_JUAL || 0),
        hargaSewa: Number(row.HARGA_SEWA || 0),
        dpMinimum: Number(row.DP_MINIMUM || 0),
        bungaTahunan: Number(row.BUNGA_TAHUNAN || 0),
        cicilan5th: Number(row.CICILAN_5TH || 0),
        cicilan7th: Number(row.CICILAN_7TH || 0),
        cicilan10th: Number(row.CICILAN_10TH || 0),
        cicilan11th: Number(row.CICILAN_11TH || 0),
        cicilan15th: Number(row.CICILAN_15TH || 0),
        cicilan20th: Number(row.CICILAN_20TH || 0),
        cicilan25th: Number(row.CICILAN_25TH || 0),
        cicilan30th: Number(row.CICILAN_30TH || 0),
        diskon: Number(row.DISKON || 0),
        status: String(row.STATUS || 'Aktif'),
        createdAt: row.CREATED_AT ? new Date(row.CREATED_AT).toISOString() : null
      };
    });
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function updateHarga(id, hargaData) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `UPDATE WEBSITE_JAKHABITAT_MASTER_HARGA 
       SET UNIT_ID = :unitId, HARGA_JUAL = :hargaJual, HARGA_SEWA = :hargaSewa,
           DP_MINIMUM = :dpMinimum, BUNGA_TAHUNAN = :bungaTahunan,
           CICILAN_5TH = :cicilan5th, CICILAN_7TH = :cicilan7th, 
           CICILAN_10TH = :cicilan10th, CICILAN_11TH = :cicilan11th,
           CICILAN_15TH = :cicilan15th, CICILAN_20TH = :cicilan20th,
           CICILAN_25TH = :cicilan25th, CICILAN_30TH = :cicilan30th,
           DISKON = :diskon, TANGGAL_MULAI = :tanggalMulai,
           TANGGAL_BERAKHIR = :tanggalBerakhir, KETERANGAN = :keterangan,
           STATUS = :status, UPDATED_AT = CURRENT_TIMESTAMP
       WHERE ID = :id`,
      { ...hargaData, id },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function deleteHarga(id) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    const result = await connection.execute(
      `DELETE FROM WEBSITE_JAKHABITAT_MASTER_HARGA WHERE ID = :id`,
      { id },
      { autoCommit: true, outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return result;
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}
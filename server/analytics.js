import oracledb from 'oracledb';

const dbConfig = {
  user: process.env.DB_USER || 'system',
  password: process.env.DB_PASSWORD || 'Pusd4t1n2025',
  connectString: process.env.DB_CONNECT_STRING || '10.15.38.162:1539/FREEPDB1',
};

const createAnalyticsTablesSQL = {
  pageViews: `
    CREATE TABLE WEBSITE_JAKHABITAT_PAGE_VIEWS (
      ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      PAGE_PATH VARCHAR2(500) NOT NULL,
      USER_IP VARCHAR2(45),
      USER_AGENT VARCHAR2(1000),
      REFERRER VARCHAR2(500),
      SESSION_ID VARCHAR2(100),
      CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `,
  events: `
    CREATE TABLE WEBSITE_JAKHABITAT_EVENTS (
      ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      EVENT_TYPE VARCHAR2(50) NOT NULL,
      EVENT_DATA VARCHAR2(1000),
      USER_IP VARCHAR2(45),
      SESSION_ID VARCHAR2(100),
      CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `
};

export async function initAnalyticsTables() {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    // Create page views table
    const pageViewsCheck = await connection.execute(
      `SELECT COUNT(*) as count FROM user_tables WHERE table_name = 'WEBSITE_JAKHABITAT_PAGE_VIEWS'`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    if (pageViewsCheck.rows[0].COUNT === 0) {
      await connection.execute(createAnalyticsTablesSQL.pageViews);
      console.log('Table WEBSITE_JAKHABITAT_PAGE_VIEWS created successfully');
    }
    
    // Create events table
    const eventsCheck = await connection.execute(
      `SELECT COUNT(*) as count FROM user_tables WHERE table_name = 'WEBSITE_JAKHABITAT_EVENTS'`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    if (eventsCheck.rows[0].COUNT === 0) {
      await connection.execute(createAnalyticsTablesSQL.events);
      console.log('Table WEBSITE_JAKHABITAT_EVENTS created successfully');
    }
  } catch (error) {
    console.error('Analytics tables initialization error:', error);
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function trackPageView(data) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    await connection.execute(
      `INSERT INTO WEBSITE_JAKHABITAT_PAGE_VIEWS 
       (PAGE_PATH, USER_IP, USER_AGENT, REFERRER, SESSION_ID) 
       VALUES (:pagePath, :userIp, :userAgent, :referrer, :sessionId)`,
      {
        pagePath: data.pagePath,
        userIp: data.userIp,
        userAgent: data.userAgent,
        referrer: data.referrer,
        sessionId: data.sessionId
      },
      { autoCommit: true }
    );
  } catch (error) {
    console.error('Track page view error:', error);
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function trackEvent(data) {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    await connection.execute(
      `INSERT INTO WEBSITE_JAKHABITAT_EVENTS 
       (EVENT_TYPE, EVENT_DATA, USER_IP, SESSION_ID) 
       VALUES (:eventType, :eventData, :userIp, :sessionId)`,
      {
        eventType: data.eventType,
        eventData: data.eventData,
        userIp: data.userIp,
        sessionId: data.sessionId
      },
      { autoCommit: true }
    );
  } catch (error) {
    console.error('Track event error:', error);
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}

export async function getAnalyticsData() {
  let connection;
  try {
    connection = await oracledb.getConnection(dbConfig);
    
    // Total page views
    const totalViews = await connection.execute(
      `SELECT COUNT(*) as count FROM WEBSITE_JAKHABITAT_PAGE_VIEWS`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    // Unique visitors (by IP)
    const uniqueVisitors = await connection.execute(
      `SELECT COUNT(DISTINCT USER_IP) as count FROM WEBSITE_JAKHABITAT_PAGE_VIEWS`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    // Daily views (last 7 days)
    const dailyViews = await connection.execute(
      `SELECT TO_CHAR(CREATED_AT, 'YYYY-MM-DD') as date, COUNT(*) as views
       FROM WEBSITE_JAKHABITAT_PAGE_VIEWS 
       WHERE CREATED_AT >= SYSDATE - 7
       GROUP BY TO_CHAR(CREATED_AT, 'YYYY-MM-DD')
       ORDER BY date`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    // Popular pages
    const popularPages = await connection.execute(
      `SELECT PAGE_PATH, COUNT(*) as views
       FROM WEBSITE_JAKHABITAT_PAGE_VIEWS 
       GROUP BY PAGE_PATH
       ORDER BY views DESC
       FETCH FIRST 5 ROWS ONLY`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    // Recent activity
    const recentActivity = await connection.execute(
      `SELECT EVENT_TYPE, EVENT_DATA, USER_IP, CREATED_AT
       FROM WEBSITE_JAKHABITAT_EVENTS 
       ORDER BY CREATED_AT DESC
       FETCH FIRST 10 ROWS ONLY`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    
    return {
      totalViews: Number(totalViews.rows[0].COUNT),
      uniqueVisitors: Number(uniqueVisitors.rows[0].COUNT),
      dailyViews: dailyViews.rows.map(row => ({
        date: row.DATE,
        views: Number(row.VIEWS)
      })),
      popularPages: popularPages.rows.map(row => ({
        page: String(row.PAGE_PATH),
        views: Number(row.VIEWS)
      })),
      recentActivity: recentActivity.rows.map(row => ({
        type: String(row.EVENT_TYPE),
        data: String(row.EVENT_DATA || ''),
        ip: String(row.USER_IP || ''),
        time: row.CREATED_AT ? new Date(row.CREATED_AT).toISOString() : null
      }))
    };
  } catch (error) {
    throw error;
  } finally {
    if (connection) {
      await connection.close();
    }
  }
}